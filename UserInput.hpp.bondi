/*******************************************************************************
 * This file is part of HydroCode1D
 * Copyright (C) 2018 Bert Vandenbroucke (bert.vandenbroucke@gmail.com)
 *
 * HydroCode1D is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * HydroCode1D is distributed in the hope that it will be useful,
 * but WITOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with HydroCode1D. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

/**
 * @file UserInput.hpp
 *
 * @brief User specific code.
 *
 * Predefined versions of this file exist and can be selected during
 * configuration by setting the -Dpredefined_test variable.
 *
 * @author Bert Vandenbroucke (bv7@st-andrews.ac.uk)
 */

#include "@PROJECT_SOURCE_DIR@/SafeParameters.hpp"

#include <cmath>

#if EOS != EOS_ISOTHERMAL
#error "The Bondi test should be run with an isothermal equation of state!"
#endif

/**
 * @brief Own implementation of the Lambert \f$W\f$ functions (branches
 * \f$W_0\f$ and \f$W_{-1}\f$).
 */
class LambertW {
private:
  /**
   * @brief Get an initial guess for the value of the given branch of the
   * Lambert \f$W\f$ function for the given input value \f$r\f$.
   *
   * For the Lambert \f$W_0\f$ function, we use the fifth order Taylor expansion
   * as given on Wikipedia. For the Lambert \f$W_{-1}\f$ function, we make use
   * of the fact that the function is almost symmetric to Lambert \f$W_0\f$
   * w.r.t. \f$W = -1\f$ close to \f$r = -\frac{1}{e}\f$, so that \f$-2-W_0\f$
   * should be a close initial guess that makes sure our Newton method ends up
   * on the right branch.
   *
   * @param r Input value \f$r\f$.
   * @param branch Desired branch of the function (only 0 and -1 are supported,
   * default: 0).
   * @return Initial guess for the value of \f$W(r)\f$.
   */
  inline static double initial_guess(const double r, const int branch = 0) {
    // precompute r powers for maximal speed
    const double r2 = r * r;
    const double r3 = r2 * r;
    const double r4 = r2 * r2;
    const double r5 = r4 * r;
    const double w = r - r2 + 1.5 * r3 - (8. / 3.) * r4 + (125. / 24.) * r5;
    if (branch == 0) {
      return w;
    } else if (branch == -1) {
      // mirror the W0 initial guess w.r.t. W = -1
      return -2. - w;
    } else {
      // we only support the 0 and -1 branches
      std::cerr << "Unsupported Lambert W branch: " << branch << std::endl;
      std::abort();
    }
  }

  /**
   * @brief Perform a single Newton step to improve on a given guess value for
   * the Lambert \f$W\f$ function for the given input value \f$r\f$.
   *
   * Based on the formula given on Wikipedia.
   *
   * @param w Guess for the value of \f$W(r)\f$. This guess can be the result of
   * a call to initial_guess, or can be a result of a previous call to this
   * function.
   * @param r Input value \f$r\f$.
   * @return Better guess for \f$W(r)\f$.
   */
  inline static double newton_step(const double w, const double r) {
    // precompute terms for maximal speed
    const double expw = std::exp(w);
    const double wexpw = w * expw;
    return w - (wexpw - r) / (expw + wexpw);
  }

public:
  /**
   * @brief Get the value of the given branch of the Lambert \f$W\f$ function
   * for the given input value \f$r\f$.
   *
   * We use a Newton method to iteratively solve the defining equation
   * \f[
   *   r = W(r) {\rm{}e}^{W(r)}.
   * \f]
   *
   * @param r Input value \f$r\f$ (only \f$-\frac{1}{e} \leq{} r < 0\f$ are
   * supported).
   * @param branch Desired branch of the function (only 0 and -1 are supported,
   * default: 0).
   * @param tolerance Required relative accuracy for the result
   * (default: 1.e-10).
   * @return Value of \f$W(r)\f$ up to the required relative accuracy.
   */
  inline static double lambert_w(const double r, const int branch = 0,
                                 const double tolerance = 1.e-10) {
    if (r >= 0. || r < -1. / M_E) {
      std::cerr << "Input value for Lambert W outside supported range: " << r
                << " (supported range: " << (-1. / M_E) << " --> " << 0. << ")!"
                << std::endl;
      std::abort();
    }
    double w0 = initial_guess(r, branch);
    double w1 = newton_step(w0, r);
    while (std::abs(w0 - w1) > std::abs(w0 + w1) * tolerance) {
      w0 = w1;
      w1 = newton_step(w0, r);
    }
    return w1;
  }
};

/*! @brief Bondi radius (in internal units of L). */
#define BONDI_RADIUS (0.5 * G_INTERNAL * MASS_POINT_MASS / ISOTHERMAL_C_SQUARED)

/*! @brief Bondi density (in internal units of M L^-3). */
#define BONDI_DENSITY (1.)

/**
 * @brief Squared Bondi velocity divided by the sound speed squared.
 *
 * @param rinv Inverse radius (in units of BONDI_RADIUS^-1).
 * @return Bondi velocity squared divided by the sound speed squared.
 */
double u2_over_cs2(double rinv) {
  const double lambertarg = -std::exp(3. + 4. * (std::log(rinv) - rinv));
  if (rinv < 1.) {
    return -LambertW::lambert_w(lambertarg, 0);
  } else {
    return -LambertW::lambert_w(lambertarg, -1);
  }
}

/**
 * @brief Get the value of the Bondi density at the given inverse radius.
 *
 * @param rinv Inverse radius (in units of BONDI_RADIUS^-1).
 * @return Value of the density (in internal units of M L^-3).
 */
double bondi_density(double rinv) {
  // we need to manually disable the density very close to r = 0 to prevent
  // errors in the Lambert W function
  if (rinv < 150.) {
    return BONDI_DENSITY * std::exp(-0.5 * u2_over_cs2(rinv) + 2. * rinv - 1.5);
  } else {
    return 0.;
  }
}

/**
 * @brief Get the value of the Bondi velocity at the given inverse radius.
 *
 * @param rinv Inverse radius (in internal units of L^-1).
 * @return Value of the fluid velocity (in internal units of L T^-1).
 */
double bondi_velocity(double rinv) {
  return -std::sqrt(ISOTHERMAL_C_SQUARED * u2_over_cs2(rinv));
}

/**
 * @brief Get the initial condition for the given spatial coordinate.
 *
 * @param x Spatial coordinate (in m).
 * @param rho Density variable to set (in kg m^-3).
 * @param u Fluid velocity variable to set (in m s^-1).
 * @param P Pressure variable to set (in kg m^-2 s^-2).
 */
inline void get_initial_hydro_variables(const double x, double &rho, double &u,
                                        double &P) {
  const double rinv = BONDI_RADIUS / RMAX;
  rho = bondi_density(rinv);
  u = bondi_velocity(rinv);
  P = ISOTHERMAL_C_SQUARED * rho;
}

#if BOUNDARIES == BOUNDARIES_CUSTOM
/**
 * @brief Get the values for the ghost cell to the left of the left boundary.
 *
 * This routine is used to apply boundary conditions to the left boundary.
 *
 * @param rho_left Density for the cell next to the left boundary (in kg m^-3).
 * @param u_left Fluid velocity for the cell next to the left boundary
 * (in m s^-1).
 * @param P_left Pressure for the cell next to the left boundary
 * (in kg m^-2 s^-2).
 * @param x_ghost Position of the ghost cell (in m).
 * @param rho_ghost Ghost cell density to set (in kg m^-3).
 * @param u_ghost Ghost cell fluid velocity to set (in m s^-1).
 * @param P_ghost Ghost cell pressure to set (in kg m^-2 s^-2).
 */
inline void get_left_boundary(const double rho_left, const double u_left,
                              const double P_left, const double x_ghost,
                              double &rho_ghost, double &u_ghost,
                              double &P_ghost) {
  // open inner boundary (outflow boundary)
  rho_ghost = rho_left;
  u_ghost = u_left;
  P_ghost = P_left;
}

/**
 * @brief Get the values for the ghost cell to the right of the right boundary.
 *
 * This routine is used to apply boundary conditions to the right boundary.
 *
 * @param rho_right Density for the cell next to the right boundary
 * (in kg m^-3).
 * @param u_right Fluid velocity for the cell next to right left boundary
 * (in m s^-1).
 * @param P_right Pressure for the cell next to the right boundary
 * (in kg m^-2 s^-2).
 * @param x_ghost Position of the ghost cell (in m).
 * @param rho_ghost Ghost cell density to set (in kg m^-3).
 * @param u_ghost Ghost cell fluid velocity to set (in m s^-1).
 * @param P_ghost Ghost cell pressure to set (in kg m^-2 s^-2).
 */
inline void get_right_boundary(const double rho_right, const double u_right,
                               const double P_right, const double x_ghost,
                               double &rho_ghost, double &u_ghost,
                               double &P_ghost) {
  // Bondi inflow
  const double rinv = BONDI_RADIUS / x_ghost;
  rho_ghost = bondi_density(rinv);
  u_ghost = bondi_velocity(rinv);
  P_ghost = ISOTHERMAL_C_SQUARED * rho_ghost;
}
#endif
