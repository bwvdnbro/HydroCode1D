/*******************************************************************************
 * This file is part of HydroCode1D
 * Copyright (C) 2018 Bert Vandenbroucke (bert.vandenbroucke@gmail.com)
 *
 * HydroCode1D is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * HydroCode1D is distributed in the hope that it will be useful,
 * but WITOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with HydroCode1D. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

/**
 * @file UserInput.hpp
 *
 * @brief User specific code.
 *
 * Predefined versions of this file exist and can be selected during
 * configuration by setting the -Dpredefined_test variable.
 *
 * @author Bert Vandenbroucke (bv7@st-andrews.ac.uk)
 */

/**
 * @brief Get the initial condition for the given spatial coordinate.
 *
 * @param x Spatial coordinate (in m).
 * @param rho Density variable to set (in kg m^-3).
 * @param u Fluid velocity variable to set (in m s^-1).
 * @param P Pressure variable to set (in kg m^-2 s^-2).
 */
inline void get_initial_hydro_variables(const double x, double &rho, double &u,
                                        double &P) {
  // this function should set the values of rho, u and P to the initial values
  // for the density, fluid velocity and pressure to the appropriate values,
  // based on the given value of the 1D coordinate x
  // all variables use SI coordinates
#error "Implement this function!"
}

#if BOUNDARIES == BOUNDARIES_CUSTOM
/**
 * @brief Get the values for the ghost cell to the left of the left boundary.
 *
 * This routine is used to apply boundary conditions to the left boundary.
 *
 * @param dt_left Time step for the cell next to the left boundary (in s).
 * @param rho_left Density for the cell next to the left boundary (in kg m^-3).
 * @param u_left Fluid velocity for the cell next to the left boundary
 * (in m s^-1).
 * @param P_left Pressure for the cell next to the left boundary
 * (in kg m^-2 s^-2).
 * @param dt_ghost Ghost cell time step to set (in s).
 * @param rho_ghost Ghost cell density to set (in kg m^-3).
 * @param u_ghost Ghost cell fluid velocity to set (in m s^-1).
 * @param P_ghost Ghost cell pressure to set (in kg m^-2 s^-2).
 */
inline void get_left_boundary(const double dt_left, const double rho_left,
                              const double u_left, const double P_left,
                              double &dt_ghost, double &rho_ghost,
                              double &u_ghost, double &P_ghost) {
  // This function should set the values of dt_ghost, rho_ghost, u_ghost and
  // P_ghost to correct values for the left boundary of the simulation box.
  // It can use the values in the cell next to the boundary.
  // Examples:
  //  Open boundary: dt_ghost = dt_left; rho_ghost = rho_left; u_ghost = u_left;
  //                 P_ghost = P_left;
  //  Reflective boundary: dt_ghost = dt_left; rho_ghost = rho_left;
  //                       u_ghost = -u_left; P_ghost = P_left;
#error "Implement this function!"
}

/**
 * @brief Get the values for the ghost cell to the right of the right boundary.
 *
 * This routine is used to apply boundary conditions to the right boundary.
 *
 * @param dt_right Time step for the cell next to the right boundary (in s).
 * @param rho_right Density for the cell next to the right boundary
 * (in kg m^-3).
 * @param u_right Fluid velocity for the cell next to right left boundary
 * (in m s^-1).
 * @param P_right Pressure for the cell next to the right boundary
 * (in kg m^-2 s^-2).
 * @param dt_ghost Ghost cell time step to set (in s).
 * @param rho_ghost Ghost cell density to set (in kg m^-3).
 * @param u_ghost Ghost cell fluid velocity to set (in m s^-1).
 * @param P_ghost Ghost cell pressure to set (in kg m^-2 s^-2).
 */
inline void get_right_boundary(const double dt_right, const double rho_right,
                               const double u_right, const double P_right,
                               double &dt_ghost, double &rho_ghost,
                               double &u_ghost, double &P_ghost) {
  // This function should set the values of dt_ghost, rho_ghost, u_ghost and
  // P_ghost to correct values for the right boundary of the simulation box.
  // It can use the values in the cell next to the boundary.
  // Examples:
  //  Open boundary: dt_ghost = dt_right; rho_ghost = rho_right;
  //                 u_ghost = u_right; P_ghost = P_right;
  //  Reflective boundary: dt_ghost = dt_right; rho_ghost = rho_right;
  //                       u_ghost = -u_right; P_ghost = P_right;
#error "Implement this function!"
}
#endif
